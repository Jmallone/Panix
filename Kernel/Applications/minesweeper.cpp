/**
 * @file minesweeper.cpp
 * @author Michel (JMallone) Gomes (michels@utfpr.edu.br)
 * @brief A minesweeper game prototype
 * @version 0.1
 * @date 2022-02-13
 *
 * @copyright Copyright the Xyris Contributors (c) 2022
 *
 */
 
#include <Applications/minesweeper.hpp>
#include <Devices/Graphics/graphics.hpp>
#include <Devices/Keyboard/keyboard.hpp>

#include <Library/rand.hpp>
#include <Library/time.hpp>
#include <Arch/i686/timer.hpp> 

#include "Logger.hpp"

namespace Apps {

static uint8_t fontData[128][8] = {
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0000 (null)
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0001
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0002
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0003
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0004
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0005
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0006
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0007
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0008
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0009
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+000A
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+000B
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+000C
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+000D
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+000E
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+000F
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0010
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0011
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0012
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0013
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0014
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0015
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0016
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0017
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0018
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0019
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+001A
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+001B
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+001C
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+001D
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+001E
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+001F
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0020 (space)
    { 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00 }, // U+0021 (!)
    { 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0022 (")
    { 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00 }, // U+0023 (#)
    { 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00 }, // U+0024 ($)
    { 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00 }, // U+0025 (%)
    { 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00 }, // U+0026 (&)
    { 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0027 (')
    { 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00 }, // U+0028 (()
    { 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00 }, // U+0029 ())
    { 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00 }, // U+002A (*)
    { 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00 }, // U+002B (+)
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06 }, // U+002C (,)
    { 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00 }, // U+002D (-)
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00 }, // U+002E (.)
    { 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00 }, // U+002F (/)
    { 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00 }, // U+0030 (0)
    { 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00 }, // U+0031 (1)
    { 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00 }, // U+0032 (2)
    { 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00 }, // U+0033 (3)
    { 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00 }, // U+0034 (4)
    { 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00 }, // U+0035 (5)
    { 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00 }, // U+0036 (6)
    { 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00 }, // U+0037 (7)
    { 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00 }, // U+0038 (8)
    { 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00 }, // U+0039 (9)
    { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00 }, // U+003A (:)
    { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06 }, // U+003B (;)
    { 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00 }, // U+003C (<)
    { 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00 }, // U+003D (=)
    { 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00 }, // U+003E (>)
    { 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00 }, // U+003F (?)
    { 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00 }, // U+0040 (@)
    { 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00 }, // U+0041 (A)
    { 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00 }, // U+0042 (B)
    { 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00 }, // U+0043 (C)
    { 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00 }, // U+0044 (D)
    { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00 }, // U+0045 (E)
    { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00 }, // U+0046 (F)
    { 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00 }, // U+0047 (G)
    { 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00 }, // U+0048 (H)
    { 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 }, // U+0049 (I)
    { 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00 }, // U+004A (J)
    { 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00 }, // U+004B (K)
    { 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00 }, // U+004C (L)
    { 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00 }, // U+004D (M)
    { 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00 }, // U+004E (N)
    { 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00 }, // U+004F (O)
    { 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00 }, // U+0050 (P)
    { 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00 }, // U+0051 (Q)
    { 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00 }, // U+0052 (R)
    { 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00 }, // U+0053 (S)
    { 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 }, // U+0054 (T)
    { 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00 }, // U+0055 (U)
    { 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00 }, // U+0056 (V)
    { 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00 }, // U+0057 (W)
    { 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00 }, // U+0058 (X)
    { 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00 }, // U+0059 (Y)
    { 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00 }, // U+005A (Z)
    { 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00 }, // U+005B ([)
    { 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00 }, // U+005C (\)
    { 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00 }, // U+005D (])
    { 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00 }, // U+005E (^)
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF }, // U+005F (_)
    { 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+0060 (`)
    { 0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00 }, // U+0061 (a)
    { 0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00 }, // U+0062 (b)
    { 0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00 }, // U+0063 (c)
    { 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00 }, // U+0064 (d)
    { 0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00 }, // U+0065 (e)
    { 0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00 }, // U+0066 (f)
    { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F }, // U+0067 (g)
    { 0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00 }, // U+0068 (h)
    { 0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 }, // U+0069 (i)
    { 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E }, // U+006A (j)
    { 0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00 }, // U+006B (k)
    { 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 }, // U+006C (l)
    { 0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00 }, // U+006D (m)
    { 0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00 }, // U+006E (n)
    { 0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00 }, // U+006F (o)
    { 0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F }, // U+0070 (p)
    { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78 }, // U+0071 (q)
    { 0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00 }, // U+0072 (r)
    { 0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00 }, // U+0073 (s)
    { 0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00 }, // U+0074 (t)
    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00 }, // U+0075 (u)
    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00 }, // U+0076 (v)
    { 0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00 }, // U+0077 (w)
    { 0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00 }, // U+0078 (x)
    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F }, // U+0079 (y)
    { 0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00 }, // U+007A (z)
    { 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00 }, // U+007B ({)
    { 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00 }, // U+007C (|)
    { 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00 }, // U+007D (})
    { 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // U+007E (~)
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }  // U+007F
};

void boardGame(int grid[][14]);
void selectedGrid(uint32_t x, uint32_t y);
void seeGrid(uint32_t x, uint32_t y, int gridBombs[][14], int gridBorder[][14],int grid[][14] );
void spotBombs( int grid[][14] );
void amountBorder( int gridBombs[][14], int gridBorder[][14] );
void labels(char c, uint32_t x, uint32_t y, uint32_t fore);
void searchForZeroForward(int x, int y, int gridBorder[][14], int grid[][14] );
void searchForZeroBackward(int x, int y, int gridBorder[][14], int grid[][14] );
void putZero( int grid[][14] );

void labels(char c, uint32_t x, uint32_t y, uint32_t fore)
{
    int FONT_WIDTH = 8;
    int FONT_HEIGHT = 8;
    
    x *= 20;
    y *= 20;
    // Draw the font glyph
    uint8_t fp = (uint8_t)c;
    for (int fy = 0; fy <= FONT_HEIGHT; fy++) {
        for (int fx = 0; fx <= FONT_WIDTH; fx++) {
            if (fx != FONT_WIDTH && fy != FONT_HEIGHT && (fontData[fp][fy] & (1 << fx))) {
                // Current position is part of the font glyph.
                Graphics::pixel(x+6 + fx, y+6 + fy, fore);
            }
        }
    }
}

void boardGame( int grid[][14] ){

    /* background */
    Graphics::putrect(0,0,280,280,0x005353);

    /* grid */
    for (int x = 0; x < 14; x++){
        for(int y = 0; y < 14; y++){

            switch ( grid[x][y] ){
                case -1 :
                    Graphics::putrect(y*20,x*20,20,20,0xFF0000);
                    labels('B', y, x, 0xFFFFFF);
                break;

                case -2:
                    Graphics::putrect(y*20,x*20,20,20,0xD9EAD3);
                break;

                case 1 :
                    // Green
                    Graphics::putrect(y*20,x*20,20,20,0x1CAE1C);
                    labels('1', y, x, 0xFFFFFF);
                break;
                case 2 :
                    // Yellow
                    Graphics::putrect(y*20,x*20,20,20,0xFFD966);
                    labels('2', y, x, 0xFFFFFF);
                break;
                case 3 :
                    // Purple
                    Graphics::putrect(y*20,x*20,20,20,0x351C75);
                    labels('3', y, x, 0xFFFFFF);
                break;
                case 4 :
                    // Blue
                    Graphics::putrect(y*20,x*20,20,20,0x3D85C6);
                    labels('4', y, x, 0xFFFFFF);
                break;
                case 5 :
                    // Orange
                    Graphics::putrect(y*20,x*20,20,20,0xF1C232);
                    labels('5', y, x, 0xFFFFFF);
                break;
                default :
                    Graphics::putrect(x*20,0,1,280,0x232336);
                    Graphics::putrect(0,y*20,280,1,0x232336);
            }
        }
    }

}

void selectedGrid(uint32_t x, uint32_t y){
    //Graphics::putrect(x,y,20,20,FF0000);
    
    for (uint32_t curr_x = x; curr_x <= x +20 ; curr_x++) {
            Graphics::pixel(curr_x, y,0X6FA8DC);
            Graphics::pixel(curr_x, y+1,0X6FA8DC);
            Graphics::pixel(curr_x,y + 20,0X6FA8DC);
            Graphics::pixel(curr_x,y + 19,0X6FA8DC);
    }
    for (uint32_t curr_y = y; curr_y <= y +20 ; curr_y++) {
            Graphics::pixel(x, curr_y,0X6FA8DC);
            Graphics::pixel(x+1, curr_y,0X6FA8DC);
            Graphics::pixel(x + 20, curr_y,0X6FA8DC);
            Graphics::pixel(x + 19, curr_y,0X6FA8DC); 
    }

}

void searchForZeroForward(int x, int y, int gridBorder[][14], int grid[][14] ){
    
    if (gridBorder[y][x] != 0) return ;
    if (x > 13 || y > 13) return;
    
    if(gridBorder[y][x] == 0){
        Logger::Info(__func__, "Procurando! [x]= %d [y]= %d", x, y);
        Logger::Info(__func__, "gridBorder [%d] ", gridBorder[y][x]);
        searchForZeroForward(x+1, y, gridBorder, grid);
        searchForZeroForward(x,y+1,gridBorder, grid);
        searchForZeroBackward(x-1,y,gridBorder, grid);
        searchForZeroBackward(x,y-1,gridBorder, grid);
        grid[y][x] = -2;
    }

}

void searchForZeroBackward(int x, int y, int gridBorder[][14], int grid[][14] ){
    
    if (gridBorder[y][x] != 0) return ;
    if (x < 0 || y < 0) return;
    
    if(gridBorder[y][x] == 0){
        Logger::Info(__func__, "Procurando! [x]= %d [y]= %d", x, y);
        Logger::Info(__func__, "gridBorder [%d] ", gridBorder[y][x]);
        searchForZeroBackward(x-1, y, gridBorder, grid);
        searchForZeroBackward(x,y-1,gridBorder, grid);
        grid[y][x] = -2;
    }
    
    

}

void seeGrid(uint32_t xx, uint32_t yy, int gridBombs[][14], int gridBorder[][14],int grid[][14] )
{
    uint32_t x = xx / 20;
    uint32_t y = yy / 20;

    Logger::Info(__func__, "Border %d--- GridBombs %d ---  grid %d", gridBorder[y][x], gridBombs[y][x], grid[y][x]);
    Logger::Info(__func__, "x %ld , y %ld ", x, y);

    
    if (gridBorder[y][x] != -1){
        Logger::Debug(__func__, "---> %d: ", gridBorder[y][x]);
        grid[y][x] = gridBorder[y][x];
    }

    if (gridBombs[y][x] == -1){
        for (int i = 0; i < 14; i++){
            for (int j = 0; j < 14; j++){
                if (gridBombs[i][j] == -1){
                    grid[i][j] = -1;
                }
            }
        }
        
        /* RESTART THE GAME */

    }

    if (grid[y][x] == 0) {
        searchForZeroForward(x,y,gridBorder, grid);
    }
    
}

void spotBombs( int grid[][14] ){
    /* grid */
    Time::TimeDescriptor time;
    srand(time.getSeconds());

    int bombNumber = 0;

    while(bombNumber <= 25){
        int x = rand() % 14;
        int y = rand() % 14;

        while (grid[x][y] == 1){
            x = rand() % 14;
            y = rand() % 14;
        }

        grid[x][y] = -1;
        bombNumber++;
    }
  
}

void amountBorder( int gridBombs[][14], int gridBorder[][14] ){
    /* count bombs */
    for (int x = 0; x < 14; x++){
        for(int y = 0; y < 14; y++){
            if (gridBombs[x][y] == -1){
                if (x > 0){
                    if (gridBombs[x-1][y] != -1){
                        gridBorder[x-1][y]++;
                    }
                }
                if (x < 13){
                    if (gridBombs[x+1][y] != -1){
                        gridBorder[x+1][y]++;
                    }
                }
                if (y > 0){
                    if (gridBombs[x][y-1] != -1){
                        gridBorder[x][y-1]++;
                    }
                }
                if (y < 13){
                    if (gridBombs[x][y+1] != -1){
                        gridBorder[x][y+1]++;
                    }
                }
                if (x > 0 && y > 0){
                    if (gridBombs[x-1][y-1] != -1){
                        gridBorder[x-1][y-1]++;
                    }
                }
                if (x < 13 && y > 0){
                    if (gridBombs[x+1][y-1] != -1){
                        gridBorder[x+1][y-1]++;
                    }
                }
                if (x > 0 && y < 13){
                    if (gridBombs[x-1][y+1] != -1){
                        gridBorder[x-1][y+1]++;
                    }
                }
                if (x < 13 && y < 13){
                    if (gridBombs[x+1][y+1] != -1){
                        gridBorder[x+1][y+1]++;
                    }
                }
            }
        }
    }
}

void minesweeperRun()
{
    /* Instructions */
    
    /*
        Directions:  
                    a - left
                    d - right
                    w - up
                    s - down

        Press 'q' to hit 
        Press 'e' to see all 'hints'
    */

    int gridBombs[14][14] = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
    };

    int gridBorder[14][14] = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
    };

    int grid[14][14] = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
    };
    

    spotBombs(gridBombs);
    amountBorder(gridBombs, gridBorder);

    /* Clear the screen */
    Graphics::resetDoubleBuffer(); 

    /* Initialize the position */
    uint32_t y = 40;
    uint32_t x = 60;

    while (1) {
        
        /* Conditions */
        if (x > 280) x-= 20;
        if (y > 280) y-= 20;

        /* Controllers */
        if(Keyboard::getPressKey() == 's') y+=20;
        if(Keyboard::getPressKey() == 'w' && y > 0) y-=20;
        if(Keyboard::getPressKey() == 'a' && x > 0) x-=20;
        if(Keyboard::getPressKey() == 'd') x+=20;

        /* Draw Grid*/
        boardGame(grid);

        /* Draw Selected Grid */
        selectedGrid(x,y);
        
        if(Keyboard::getPressKey() == 'q') {
            seeGrid(x, y, gridBombs, gridBorder, grid );
            //boardGame(gridBombs);
        };

        if(Keyboard::getPressKey() == 'e') {
            boardGame(gridBorder); 
            
        };

        /* Swap to real framebuffer*/
        Graphics::swap();

    }

}

}